// src/types/chat.ts
import { TaskState } from './a2a';

/**
 * Represents the type of chat (direct message or group).
 */
export const ChatTypeValueEnum = ["direct", "group"] as const;
export type ChatTypeValue = (typeof ChatTypeValueEnum)[number];

/**
 * Represents a chat conversation.
 * A chat is a container for messages and can be associated with one or more tasks.
 * It has a primary context ID for the overall conversation, and individual tasks
 * within it can also have their own specific context IDs.
 *
 * Future Enhancements:
 * - Task Workflow Templates: Define predefined sequences of tasks or agent interactions
 *   that can be instantiated within a chat. This would allow for consistent execution
 *   of complex processes (e.g., "Weekly Report Generation", "Customer Onboarding").
 *   A chat could be associated with a `workflowTemplateId` and `currentWorkflowStep`.
 * - Granular Task States: Beyond the A2A TaskStatus, a chat might track application-specific
 *   states for tasks, e.g., "pending-assignment", "review-required".
 */
export type ChatType = {
  id: string; // Unique identifier for the chat
  type: ChatTypeValue; // "direct" or "group"
  name: string; // Display name of the chat
  description?: string | null; // Description of the chat

  channelId: string; // Link chat to a channel within a workspace

  /** positive number means pinned (descending order) of the chat in the channel, 
   * 0 means unpinned (normal order by latest activity in app), 
   * negative means archived and not shown in the UI, 
   * AND run any task or recieve update, AND excludes from any context 
   */
  order: number;

  // UI-related fields
  lastViewedMessageId: string; // id of the last message the user has viewed in the chat

  participants: Array<{
    userId: string; // ID of the UserType
    addedBy: string; // id of the user who added this participant to the chat
    role?: 'owner' | 'admin' | 'member' | 'guest' | null; // Role within this specific chat
  }>; // List of participants (users or agents represented by a user-like profile)

  // Extended metadata for application-specific needs
  metadata?: Record<string, any> & {
    createdAt?: number;
    createdBy?: string; // userId or agentId of the creator
    workflowInstanceId?: string; // If this chat is part of a larger predefined workflow
  } | null; // metadata for the chat
};

// Task Management
// This type is only used in the local app as index for better context management, not in the a2a network
// IDs of tasks associated with this chat. These tasks are defined by the A2A Task interface.
// A single chat can involve multiple tasks. For example:
// 1. A recurring task (e.g., an agent making a daily report).
// 2. In a group chat, different agents might have their own tasks contributing to the chat.
// 3. A complex task might be broken down into sub-tasks, each represented here,
// all contributing to a larger goal within the shared chat context.
export type TaskType = {
  id: string;
  chatId: string;
  channelId: string;
  a2aId?: string | null; // id of the task in the a2a network, generated by the a2a server
  summary?: string | null; // summary of the task for better context management, commonly generated by the workspace admin agent
  status: TaskState; // aligned with A2A TaskState
  relatedTaskIds?: string[]; // for context management
  createdAt: number;
  createdBy: string; // id of the user or agent who created this task
  updates: {
    status: TaskState;
    updatedAt: number;
    updatedBy: string; // id of the user or agent who updated this task
    relatedMessageId: string; // id of the message that triggered this update
  }[];
  metadata?: Record<string, any> | null;
};