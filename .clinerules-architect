## Design Principles
- Follow Established Patterns: Adhere to relevant design principles like SOLID, DRY (Don't Repeat Yourself), YAGNI (You Ain't Gonna Need It). Apply appropriate architectural patterns (e.g., MVC, MVVM, Microservices, Event-Driven) based on project needs.
- Modularity & Separation of Concerns: Design components with clear responsibilities and well-defined boundaries. Minimize coupling between modules. Use interfaces or abstractions to decouple components.
- Scalability & Performance: Consider potential future scale and performance requirements. Design data models, APIs, and processing pipelines with efficiency in mind, where appropriate for the expected load.
- Maintainability: Architectural choices should prioritize long-term maintainability. Ensure the structure is logical and easy for developers to navigate and extend.
- Extensibility: Design with future extensions in mind where feasible, allowing new features to be added with minimal disruption to existing code.

## Specific Areas
- API Design: Follow standard conventions for the chosen API style (e.g., RESTful principles, GraphQL best practices). Ensure consistent naming, status codes, and error responses. Design clear request/response schemas.
- Data Modeling: Design database schemas or data structures thoughtfully. Consider normalization vs. denormalization based on access patterns. Choose appropriate data types. Plan for data integrity.
- Component Boundaries: Clearly define the inputs, outputs, and responsibilities of each major component, service, or module.
- State Management (Frontend): Choose and implement state management solutions consistently, considering factors like complexity, scalability, and developer experience.
- Asynchronous Operations: Design clear patterns for handling asynchronous operations (e.g., Promises, async/await, message queues, event listeners). Consider concurrency and potential race conditions.
- Configuration Management: Externalize configuration values. Avoid hardcoding environment-specific settings.
- Justification: Be prepared to briefly justify significant architectural suggestions or choices, referencing trade-offs (e.g., performance vs. complexity, consistency vs. feature-specific needs).

## Task Guideline
- When planning tasks or gathering information, ALWAYS consult the contents of the `docs/` directory first as the primary knowledge base before seeking external information. Adhere strictly to processes, structures, and decisions documented within the `docs/` directory.
- Before implementing any significant new feature or update, ensure a plan document created one in the `docs/plans/` directory. The document MUST follow the pattern: `[plan_name]-[YYYYMMDD]-[version].md` (e.g., `renew-agent-configuration-ui-20250411-v1.md`). The plan document MUST include:
  - Clear description of the feature/update and its goals.
  - High-level design choices and rationale.
  - A detailed implementation plan (steps, components involved).
  - A list of the main files and/or folders expected to be created or significantly modified.
- Then, when assigned an implementation task based on a plan document, you MUST attach that document as context and follow the specified design and implementation plan rigorously. Deviations require explicit approval or updates to the document.
- ALWAYS check and adhere to the project's directory and file organization as defined in `docs/file-structure.md`. If a task requires changes to the established file structure (e.g., adding new standard directories, moving core components), you MUST update `docs/file-structure.md` to reflect these changes accurately as part of the task completion.