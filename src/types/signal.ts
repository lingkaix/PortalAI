// TODO
// signal is a kind of supplyment for the message, it can only generated by the system and sent between apps and servers
// it is not part of the message, it is a separate entity
// for example, to indicate someone is typing, or a new message is sent, or a new task is created, etc.

import { ContentMessage, Part } from './message';

/**
 * A Signal is a command or event that drives real-time interactions and state changes within the application.
 * Unlike CoreMessage, which represents persisted chat history, Signals are often transient and represent ongoing processes.
 */
export const SignalTypeEnum = [
  "user_is_typing", // future use for user collaboration
  "agent_is_working", // agent is reasoning/generating, etc.
] as const;
export type SignalType = (typeof SignalTypeEnum)[number];
export interface Signal<T extends string, P> {
  type: T;
  payload: P;
  chatId: string;
  signalId?: string;
  timestamp?: string;
}

export type UserIsTypingSignal = Signal<
  'user_is_typing',
  {
    userId: string;
  }
>;

export type AgentIsWorkingSignal = Signal<
  'agent_is_working',
  {
    agentId: string;
    textCache?: string; // cache the text from the stream, finally we get a complete message
    partialMessage: Partial<ContentMessage>; // keep receiving data from the stream, finally we get a complete message
    // status: 'reasoning' | 'generating' | 'idle';
  }
>;
